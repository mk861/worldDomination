{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 static void Main(string[] args)\
    \{\
      int atkTroopNo = 3;\
	  int atkdiceNo = 0;\
	  int[] attacks;\
\
	  // Checks the number of attacking troops and allocates appropriate 	      amount of dice\
	  if (atkTroopNo >= 3)\
	  \{\
      	atkdiceNo = 3;\
	  \}\
	  else if (atkTroopNo == 2)\
	  \{\
     	 atkdiceNo = 2;\
	  \}\
	  else\
	  \{\
    	  atkdiceNo = 1;\
	  \}\
\
	  // "Rolls" each dice and stores output in attacks\
	  attacks = Roll(atkdiceNo);\
\
\
	  int defDiceNo = 0;\
	  int[] defences;\
       // Checks the number of defending troops and allocates appropriate 	        amount of dice\
	  if (atkTroopNo > 1)\
	  \{\
		  defDiceNo = 2;\
	  \}\
	  else\
	  \{\
		  defDiceNo = 1;\
	  \}\
\
      // "Rolls" the defenders dice\
	  defences = Roll(defDiceNo);\
\
	  // Calls VictorDecider to compare the arrays and see who won\
	  VictorDecider(attacks,defences,defDiceNo);\
    \}\
    \
    static int[] Roll(int numOfDice)\
    \{\
	  var random = new Random();\
      int[] resultArray;\
      \
      // Initialize the array with the appropriate size\
      resultArray = new int[numOfDice];\
      \
      // Loops depending on how many dice are being used\
	  for (int i = 0; i < numOfDice; i++)\
	  \{\
      	  // Gets int between 1 and 6\
    	  resultArray[i] = random.Next(1, 7);\
	  \}\
	  \
      // Sorts the array into descending order\
	  Array.Sort(resultArray);\
	  Array.Reverse(resultArray);\
      \
      return(resultArray);\
    \}\
    \
    static void VictorDecider(int[] attacks, int[] defences, int defDiceNo)\
    \{\
      int attackDubs = 0;\
	  int defenceDubs = 0;\
\
	  // Loops depending on how many dice are being used\
      // Limits the attackers to use the same amount of dice as the 			 defenders\
	  for (int i = 0; i < defDiceNo; i++)\
	  \{\
         // The if statement decides whose dice wins and allocates points\
   	  	 if (attacks[i] > defences[i])\
    		\{\
    			attackDubs++;\
   			 \}\
   		 else\
    		\{\
    			defenceDubs++;\
    		\}    \
	  \}\
	  // Compares total points accumulated and decides the victor\
	  if (attackDubs > defenceDubs)\
	  \{\
		  Console.WriteLine("The attackers win");\
	  \}\
	  else\
	  \{\
		  Console.WriteLine("The defenders win");\
	  \}}